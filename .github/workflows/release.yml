name: Release VSIX

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for release (e.g., v0.4.0). If empty, uses package.json version.'
        required: false
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.18.1
      - run: npm ci --no-audit --no-fund || npm install --no-audit --no-fund
      - run: npm run compile
      - name: Compute release tag
        id: vars
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="v$(node -p "require('./package.json').version")"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Ensure tag exists on origin
        shell: bash
        env:
          TAG: ${{ steps.vars.outputs.tag }}
        run: |
          git fetch --tags --force
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists locally"
          else
            git tag "$TAG"
            echo "Created tag $TAG"
          fi
          # Push tag if missing on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "Tag $TAG already exists on origin"
          else
            git push origin "refs/tags/$TAG"
          fi
      - name: Package VSIX
        run: npx @vscode/vsce package --no-yarn
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: '*.vsix'
      - name: Create GitHub Release and upload VSIX
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.tag }}
          files: |
            *.vsix
          generate_release_notes: true
          body_path: docs/CHANGELOG.md
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
      - name: Determine VSCE PAT
        id: vsce
        shell: bash
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          if [ -n "$VSCE_TOKEN" ]; then
            echo "pat=$VSCE_TOKEN" >> $GITHUB_OUTPUT
          elif [ -n "$VSCE_PAT" ]; then
            echo "pat=$VSCE_PAT" >> $GITHUB_OUTPUT
          else
            echo "pat=" >> $GITHUB_OUTPUT
          fi
      - name: Publish to VS Code Marketplace (optional)
        if: ${{ steps.vsce.outputs.pat != '' }}
        env:
          VSCE_PAT: ${{ steps.vsce.outputs.pat }}
        run: npx @vscode/vsce publish --packagePath *.vsix --no-yarn



