----------------------------------------------------------------------
--
-- Copyright 1974 to current year. AVEVA Solutions Limited and its subsidiaries. All rights reserved in original code only.
--
--  File:            equibasic.pmlfrm
--    Type:          Form Definition
--    Group:         Equipment
--      Keyword:     EQUI
--    Module:        Design
--  Author:          M.Barlow
--  Created:         Wed Feb  9 10:53:49 2011
--
--  Description:     Create Equipment element without equipment template
--
------------------------------------------------------------------------
--
-- Methods defined:
--
--  Method call                      Return              Description
--  ===========                      ======              ===========
--  apply()                          -                   Create equipment callback
--  close()                          -                   Close form
--  createEquipment(DBREF)           -                   Create equipment/area/demolition element
--  demolitionSetup()                -
--  edgPick()                        -                   Setup position pick
--  equiBasic()                      -                   Constructor
--  feedback()                       -                   Position graphical feedback
--  initialise()                     -                   Form shown event
--  isValidReference(GADGET,STRING)  BOOLEAN             Validate that tag line is in the range
--  nameCheck()                      -                   Validate name gadget
--  setData()                        -                   Set position from ship grid data
--  setPosition()                    -                   Set position from ship position
--  setPositionXYZ()                 -                   Set position from PDMS position
--  setShipPosition(POSITION)        -                   Set ship position gadgets
--  setWrt()                         -
--  switchPositionGadget(BOOLEAN)    -                   Switch between ship and standard position
--  tidy()                           -                   Clear graphical feedback
--
------------------------------------------------------------------------
--

setup form !!equiBasic dialog resize

  -- Element Name
  frame .nameFrame 'Naming' anchor left + right + top width 38
    text  .name   anchor left + right + top  at xmin y0.2 width 35 NAME
  exit

  -- Standard WRT positioning frame shown in PDMS and Marine
  frame .positionFrame  'Position'  anchor left + right + top  at x0 ymax+0.2 width.nameFrame

    path down
    vdist 0.1
    option .ew      anchor left  + top         at xmin y0.7     width 5
    option .ns      anchor left  + top                             width 5
    option .ud      anchor left  + top                             width 5
    text   .x       anchor left  + right + top at xmax+0.8 ymin.ew width 18 is REAL format !!distanceFmt
    text   .y       anchor left  + right + top at xmin     ymin.ns width 18 is REAL format !!distanceFmt
    text   .z       anchor left  + right + top at xmin     ymin.ud width 18 is REAL format !!distanceFmt
    toggle .xFlag   anchor right + top         at xmax+0.9 ymin.ew
    toggle .yFlag   anchor right + top         at xmin     ymin.ns
    toggle .zFlag   anchor right + top         at xmin     ymin.ud

    --  Reference (wrt)
    halign right
    text .wrt 'WRT' anchor left + right + top  at x1 ymax+0.2  tagwid 8 width 26 string

    para   .lock    anchor right + top         at xmin.xFlag-1.3 ymin.ew-1.2 text 'Lock'
    button .switchToShip 'Ship Position' tooltip 'Ship Position' pixmap         at x0.5 ymin.lock+0.2 width 16 height 16

  exit

  -- Ship grid position frame, only shown in Marine
  frame .shipPositionFrame  'Ship Position'  anchor left + right + top          at xmin.positionFrame      ymin.positionFrame width.nameFrame

    button .switchToPos 'Explicit Position' tooltip 'Explicit Position' pixmap  at xmin.switchToShip ymin.switchToShip width 16 height 16

    -- Frame information
    text .xGridline 'FR'      tagwidth 3  anchor left + top          at x1               ymax+0.2  width 3  is REAL format !!integerFmt
    text .xOffset                         anchor left + top          at xmax+0.7         ymin      width 7  is REAL format !!distanceFmt
    text .xPosition 'X'                   anchor left + right + top  at xmax+1           ymin      width 15 is REAL format !!distanceFmt

    -- Horizontal Longitude information
    text .yGridline 'LH'      tagwidth 3  anchor left + top          at x1               ymax+0.2  width 3  is REAL format !!integerFmt
    text .yOffset                         anchor left + top          at xmax+0.7         ymin      width 7  is REAL format !!distanceFmt
    text .yPosition 'Y'                   anchor left + right + top  at xmax+1           ymin      width 15 is REAL format !!distanceFmt

    -- Vertical Longitude information
    text .zGridline 'LV'      tagwidth 3  anchor left + top          at x1               ymax+0.2  width 3  is REAL format !!integerFmt
    text .zOffset                         anchor left + top          at xmax+0.7         ymin      width 7  is REAL format !!distanceFmt
    text .zPosition 'Z'                   anchor left + right + top  at xmax+1           ymin      width 15 is REAL format !!distanceFmt

    -- Column headings
    paragraph .offsetTag                  anchor left + top          at xmin.xOffset+1   ymin.xOffset-0.8  text 'Offset'
    paragraph .positionTag                anchor left + right + top  at xmin.xPosition+3 ymin      width 9.5 lines 1

  exit

  frame .equipAttributes    'Attributes'  anchor left + right + top  at x0               ymax.positionFrame+0.2 width.nameFrame

    path down
    vdist 0.1
    text .description |Description:|         anchor left + right + top  at x1            ymax   tagwidth 16 width 18 STRING
    text .function    |Function:|            anchor left + right + top                          tagwidth 16 width 18 STRING
    text .code        |Design Code:|         anchor left + right + top                          tagwidth 16 width 18 STRING
    text .paint       |Paint Specification:| anchor left + right + top                          tagwidth 16 width 18 STRING
    text .inSpec      |Inspection Schedule:| anchor left + right + top                          tagwidth 16 width 18 STRING

  exit

  -- Apply
  button .cancel 'Cancel'                 anchor right + bottom      at xmax form-size   ymax.equipAttributes+0.8  width 7 CANCEL
  button .apply  'OK'                     anchor right + bottom      at xmin.cancel-9    ymin                      width 7 OK

  -- Form Data

  -- WRT Element
  member .wrtElement    is DBREF

  -- Ship Grid
  member .shipGrid      is SHIPGRID

  -- Current position
  member .position      is POSITION

  -- PDMS position gadget control
  member .positionLink  is POSITIONLINK

  -- Feedback aid number
  member .aidNumber     is REAL

  -- Undo for creation
  member .undo          is UNDOABLE

  -- Marine or PDMS
  member .isMarine      is BOOLEAN

  -- Position in hierarchy at which to create element
  member .currentElement is DBREF

exit
-- End of form definition

------------------------------------------------------------------------
--
-- Method:      equiBasic
--
-- Description: Constructor
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
--

define method .equiBasic()

  -- Form properties
  !this.formTitle             = 'Equipment Creation'
  !this.iconTitle             = 'EQUC'
  !this.callback              = '!this.initialise()'
  !this.cancelCall            = '!this.close()'
  !this.cancel.callback       = '!this.close()'
  !this.apply.callback        = '!this.apply()'
  !this.name.callback         = '!this.nameCheck()'
  !this.switchToShip.callback = '!this.switchPositionGadget(true)'
  !this.switchToPos.callback  = '!this.switchPositionGadget(false)'
  !this.xGridline.callback    = '!this.setData()'
  !this.xOffset.callback      = '!this.setData()'
  !this.xPosition.callback    = '!this.setPosition()'
  !this.yGridline.callback    = '!this.setData()'
  !this.yOffset.callback      = '!this.setData()'
  !this.yPosition.callback    = '!this.setPosition()'
  !this.zGridline.callback    = '!this.setData()'
  !this.zOffset.callback      = '!this.setData()'
  !this.zPosition.callback    = '!this.setPosition()'
  !this.wrt.callback          = '!this.setWrt()'
  !this.switchToShip.addPixmap(!!pml.getPathname('frlg16.png'))
  !this.switchToShip.setTooltip('Position')
  !this.switchToPos.addPixmap(!!pml.getPathname('xyz16.png'))
  !this.switchToPos.setTooltip('Explicit Position')

  -- Initialise Variables
  !this.positionTag.val         = 'World Position'

  -- !mm = object AVEVAMODULEMANAGER()
  -- !this.isMarine = ( !mm.currentProductName().upcase().eq('HULL & OUTFITTING') )
  !this.isMarine = ( !!module().projectType.upcase() eq 'MARINE' )

  !this.position   = object POSITION('N0 WRT WORLD')
  if( !this.isMarine ) then
    -- not sure why the next line is necessary - but without it !this.shipGrid does not initialise
    !this.shipGrid = object SHIPGRID()
    !this.setShipPosition(!this.position)

    -- Set Validation check for tag lines
    !this.xGridline.validateCall  = '!this.isValidReference('
    !this.yGridline.validateCall  = '!this.isValidReference('
    !this.zGridline.validateCall  = '!this.isValidReference('

    -- Load Tags
    !this.xGridline.tag           = 'FR'
    !this.yGridline.tag           = 'LH'
    !this.zGridline.tag           = 'LV'
  endif

  -- Aid Number
  !this.aidNumber                 = !!aidNumbers.add('Basic Equipment Create')

  -- UNDO
  !this.undo.description('Basic Create Equipment')
  !this.apply.setUndoable(!this.undo)

  !this.shipPositionFrame.visible = !this.isMarine
  !this.positionFrame.visible     = !this.isMarine.not()
  !this.switchToShip.visible      = !this.isMarine

  VAR !coordinate COORDINATE
  -- Link Position Input Gadgets to Objects
  !this.positionLink.linkInput('!!equiBasic.positionLink',  !this.x, !this.y, !this.z)

  -- Link Position Lock Gadgets to Objects
  !this.positionLink.linkLock('!!equiBasic.positionLink',   !this.xFlag, !this.yFlag, !this.zFlag)

  -- Link Position Option Gadgets to Objects
  !this.positionLink.linkOption('!!equiBasic.positionLink', !this.ew, !this.ns, !this.ud, !coordinate)

  -- Set Position Action
  !this.positionLink.setAction('!!equiBasic.setPositionXYZ()')

  -- Set defaults for form
  !this.positionLink.position(!this.position, false, true)
  !this.wrtElement = World
  !this.wrt.val    = 'world'
  !this.setWrt()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      initialise
--
-- Description: Form shown event
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .initialise()

  !this.currentElement = !!ce

  --var !list LIST
  !types = !!ce.list
  !currentType = !this.currentElement.type

  if     ((!currentType eq |EQUI|)   or (!types.findFirst(|EQUI|).set())) then
    !this.formTitle             = 'Equipment Creation'
    !this.code.active = true
    !this.inSpec.active = true
    !this.paint.active = true

  elseif ((!currentType eq |AREADE|) or (!types.findFirst(|AREADE|).set())) then
    !this.formTitle             = 'Area Creation'
    !this.code.active = false
    !this.inSpec.active = false
    !this.paint.active = false

  elseif ((!currentType eq |DEMOPA|) or (!types.findFirst(|DEMOPA|).set())) then
    !this.formTitle             = 'Demolition Creation'
    !this.code.active = false
    !this.inSpec.active = false
    !this.paint.active = false

  else
     -- None of the above
  endif

  -- Clear name field
  !this.name.val = 'unset'

  -- Associate position option gadgets to link object
  var !coordinate coordinate
  !this.positionLink.linkOption('!!equiBasic.positionLink', !this.ew, !this.ns, !this.ud, !coordinate)
  !this.positionLink.position(!this.position, false, true)
  -- initialise position pick
  !this.edgPick()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      close
--
-- Description: Close form
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .close()

  -- Clear graphics
  !this.tidy()
  !!edgCntrl.remove('Basic Equipment Create')

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      tidy
--
-- Description: Clear graphical feedback
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .tidy()

  -- Clear graphics
  !!aidNumbers.hide(!this.aidNumber)

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      edgPick
--
-- Description: Setup position pick
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
--    1   R      DBREF       Element to be modified
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

-- Define method
define method .edgPick()

  -- Define EDG positional pick
  !packet                = object EDGPACKET()
  !packet.positionLink('!!equiBasic.positionLink', 'Pick Position')
  !packet.key            = 'equipmentPosition'
  !packet.description    = 'Basic Equipment Create'
  !packet.priority       = 1
  !packet.remove         = false
  !packet.type           = 'dbModify'

  -- Add into EDG packet
  !!edgCntrl.add(!packet)

endmethod
-- End of method definition for .edit(DBREF)

------------------------------------------------------------------------
--
-- Method:      apply
--
-- Description: Create equipment callback
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .apply()

  -- create equipment element and handle any error
  !this.createEquipment(!this.currentElement)
  handle any
    !!alert.error(!!error.text)
  endhandle
  !this.close()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      feedback
--
-- Description: Position graphical feedback
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .feedback()

  -- Check if the element name has a valid orientation
  !orientation = !this.wrtElement.orientation
  handle any
    !orientation = object ORIENTATION('Z IS Z AND X IS X')
  endhandle
  !gphAxes        = object GPHAXES(!this.position, !orientation)
  !gphAxes.detail = false
  !gphAxes.xyz    = false
  !gphAxes.height = 250mm
  !!aidNumbers.replace(!this.aidNumber, !gphAxes)

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      createEquipment
--
-- Description: Create equipment/area/demolition element
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .createEquipment(!element is DBREF)

  !!ce = !element

  !elementType = 'EQUI'
  --var !list LIST
  !types = !!ce.list
  !currentType = !element.type

  if   ((!currentType eq |EQUI|)   or (!types.findFirst(|EQUI|).set())) then
     !elementType = |EQUI|

  elseif ((!currentType eq |AREADE|) or (!types.findFirst(|AREADE|).set())) then
     !elementType = |AREADE|

  elseif ((!currentType eq |DEMOPA|) or (!types.findFirst(|DEMOPA|).set())) then
     !elementType = |DEMOPA|

  else
     -- None of the above
  endif

  NEW $!elementType

  if ((!this.name.val.empty().not()) and (!this.name.val neq 'unset')) then
    NAME $!<this.name>

  elseif (!!namOpt.auto()) then
    !autoName = !!namOpt.nameString(!!ce, '', false, false)
    if (!autoName.unset().not()) then
       -- Attempt to do even if a leading slash is missing
       if (!autoName.substring(1, 1) neq '/') then
         !autoName = '/' + !autoName
       endif
       NAME $!autoName
       handle any
         !!alert.error(!!error.text)
       endhandle
    endif
  endif

  DESC |$!<this.description>|
  FUNC |$!<this.function>|
  if     (!elementType eq 'EQUI') then
    DSCO |$!<this.code>|
    INSC |$!<this.inSpec>|
    PTSP |$!<this.paint>|

  elseif (!elementType eq 'DEMOPA') then
    !this.demolitionSetup()
  endif

  -- Modify position
  !!ce.position  = !this.position

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      isValidReference
--
-- Description: Validate that tag line is in the range
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .demolitionSetup()

  !currentElement = !!ce
  !!cmsys.executecommand('AVEVA.Laser.Reference.Laser.UI')
  !!ce = !currentElement

endmethod
-- End of method


------------------------------------------------------------------------
--
-- Method:      isValidReference
--
-- Description: Validate that tag line is in the range
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .isValidReference(!gadget is GADGET, !dummyString is STRING) is BOOLEAN

  -- Initialise Variables
  !value    = !gadget.val

  -- Assume 0 is always valid
  if(!value.eq(0)) then
    return true
  endif

  -- Check values are in range
  if(!gadget.name().eq('XGRIDLINE')) then
    !range  = !this.shipGrid.xRange()
  elseif (!gadget.name().eq('YGRIDLINE')) then
    !range  = !this.shipGrid.yRange()
  elseif (!gadget.name().eq('ZGRIDLINE')) then
    !range  = !this.shipGrid.zRange()
  endif

  -- Check value is valid
  if(!gadget.val.between(!range[1], !range[2]).not()) then
    return error 1 'Value must lie between $!range[1] and $!range[2]'
  endif

  -- Return
  return true

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      setPositionXYZ
--
-- Description: Set position from PDMS position
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .setPositionXYZ()

  -- Get position
  !this.position = !this.positionLink.get()
  !this.setShipPosition(!this.position)
  !this.feedback()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      setPosition
--
-- Description: Set position from ship position
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .setPosition()

  -- Get position
  !this.position        = object POSITION('N0 WRT WORLD')
  !this.position.east   = !this.xPosition.val
  !this.position.north  = !this.yPosition.val
  !this.position.up     = !this.zPosition.val

  -- Get ship position
  !this.setShipPosition(!this.position)
  !this.feedback()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      setShipPosition
--
-- Description: Set ship position gadgets
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
--    1   R      POSITION    Position to set
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .setShipPosition(!position is POSITION)

  if( !this.isMarine.not() ) then
    return
  endif

  -- Get ship position
  !shipGridPosition   = !this.shipGrid.shipGridPosition(!position)
  if( !shipGridPosition.valid() ) then
    !this.xGridline.val = !shipGridPosition.xGridline
    !this.xOffset.val   = !shipGridPosition.xOffset
    !this.yGridline.val = !shipGridPosition.yGridline
    !this.yOffset.val   = !shipGridPosition.yOffset
    !this.zGridline.val = !shipGridPosition.zGridline
    !this.zOffset.val   = !shipGridPosition.zOffset

    -- Update position gadgets
    !worldPosition      = !position.wrt(World)
    !this.xPosition.val = !worldPosition.east
    !this.yPosition.val = !worldPosition.north
    !this.zPosition.val = !worldPosition.up
  else
    -- if the grid is not valid, use the world position
    !this.shipPositionFrame.visible = false
    !this.positionFrame.visible     = true
  endif

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      setWrt
--
-- Description  Set new WRT element
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

-- Define method
define method .setWrt()

  !elementName  = !!checkName(!this.wrt.val, 'OLD')

  if (!elementName.set()) then
    -- re-defined reference
    !this.wrtElement = !elementName.dbRef()
  else
    -- no element found with that name; use current element
  endif

  -- Set tagging method up
  !this.positionLink.setWrt(!this.wrtElement)

  -- Set gadget with name of item
  !this.wrt.val = !this.wrtElement.name

endmethod
-- End of method definition for .setWrt()

------------------------------------------------------------------------
--
-- Method:      setData
--
-- Description: Set position from ship grid data
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------

define method .setData()

  -- Get new position
  !this.position      = !this.shipGrid.position(!this.xGridline.val,!this.xOffset.val, !this.yGridline.val, !this.yOffset.val, !this.zGridline.val, !this.zOffset.val)

  -- Update position gadgets
  !worldPosition      = !this.position.wrt(World)
  !this.xPosition.val = !worldPosition.east
  !this.yPosition.val = !worldPosition.north
  !this.zPosition.val = !worldPosition.up

  !this.feedback()

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      .nameCheck()
--
-- Description: Validate name gadget
--
-- Method Type: Procedure
--
------------------------------------------------------------------------
define method .nameCheck()

  !!nameGadget(!this.name, 'NEW')

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      .switchPositionGadget()
--
-- Description: Switch between ship and standard position
--
-- Method Type: Procedure
--
------------------------------------------------------------------------
define method .switchPositionGadget(!ship is BOOLEAN)

  if( !ship ) then
    !this.shipPositionFrame.visible = true
    !this.positionFrame.visible     = false
    !this.setShipPosition(!this.position)
  else
    !this.shipPositionFrame.visible = false
    !this.positionFrame.visible     = true
    !this.positionLink.setWrt(!this.wrtElement)
    !this.positionLink.position(!this.position, false, false)
  endif

endmethod
-- End of method
